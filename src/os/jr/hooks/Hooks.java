package os.jr.hooks;

import java.util.HashMap;

import os.jr.game.RSGame;
import os.jr.hooks.loader.GameClass;

public class Hooks {

	public static Hooks selector;
	public static HashMap<String, String> classNames = new HashMap<String, String>();
	public static HashMap<String, String> refactoredClassNames = new HashMap<String, String>();
	public static GameClass[] collection = new GameClass[400];

	public static void init() {
		try {
			selector = new Hooks();
		} catch (Exception e) {
			System.out.println("Client hooks outdated. Please update from github or update hooks yourself.");
			System.out.println("Running without hooks.");
			RSGame.outdated = true;
			e.printStackTrace();
		}

	}

	public AbstractByteBuffer abstractByteBuffer = new AbstractByteBuffer() {
	};
	public AbstractIntegerNode0 abstractIntegerNode0 = new AbstractIntegerNode0() {
	};
	public AbstractSoundSystem abstractSoundSystem = new AbstractSoundSystem(null);
	public Actor actor = new Actor();
	public Area area = new Area(null);
	public AttackOption attackOption = new AttackOption(null);
	public AudioEnvelope audioEnvelope = new AudioEnvelope(null);
	public AudioInstrument audioInstrument = new AudioInstrument();
	public BaseVarType baseVarType = new BaseVarType();
	public BoundingBox boundingBox = new BoundingBox();
	public BoundingBox2D boundingBox2D = new BoundingBox2D();
	public BoundingBox3D boundingBox3D = new BoundingBox3D();
	public Bounds bounds = new Bounds();
	public Buffer buffer = new Buffer(null);
	public BufferProvider bufferProvider = new BufferProvider();
	public BuildType buildType = new BuildType();
	public ByteArrayNode byteArrayNode = new ByteArrayNode();
	public CacheableNode cacheableNode = new CacheableNode(null);
	public CacheFile cacheFile = new CacheFile(null);
	public ChatLineBuffer chatLineBuffer = new ChatLineBuffer();
	public ClanMember clanMember = new ClanMember();
	public Class0 class0 = new Class0();
	public Class1 class1 = new Class1();
	public Class101 class101 = new Class101();
	public Class105 class105 = new Class105();
	public Class106 class106 = new Class106();
	public Class11 class11 = new Class11(null);
	public Class111 class111 = new Class111();
	public Class113 class113 = new Class113();
	public Class115 class115 = new Class115();
	public Class116 class116 = new Class116();
	public Class133 class133 = new Class133();
	public Class139 class139 = new Class139();
	public Class150 class150 = new Class150();
	public Class153 class153 = new Class153();
	public Class157 class157 = new Class157();
	public Class159 class159 = new Class159(null);
	public Class160 class160 = new Class160();
	public Class161 class161 = new Class161();
	public Class163 class163 = new Class163();
	public Class167 class167 = new Class167();
	public Class168 class168 = new Class168();
	public Class169 class169 = new Class169();
	public Class173 class173 = new Class173();
	public Class175 class175 = new Class175();
	public Class178 class178 = new Class178();
	public Class179 class179 = new Class179();
	public Class18 class18 = new Class18();
	public Class180 class180 = new Class180();
	public Class185 class185 = new Class185();
	public Class186 class186 = new Class186();
	public Class188 class188 = new Class188();
	public Class19 class19 = new Class19();
	public Class192 class192 = new Class192();
	public Class193 class193 = new Class193();
	public Class194 class194 = new Class194();
	public Class199 class199 = new Class199();
	public Class2 class2 = new Class2();
	public Class20 class20 = new Class20();
	public Class21 class21 = new Class21();
	public Class211 class211 = new Class211();
	public Class213 class213 = new Class213();
	public Class214 class214 = new Class214();
	public Class215 class215 = new Class215();
	public Class216 class216 = new Class216();
	public Class217 class217 = new Class217();
	public Class218 class218 = new Class218();
	public Class219 class219 = new Class219();
	public Class22 class22 = new Class22();
	public Class221 class221 = new Class221();
	public Class222 class222 = new Class222();
	public Class225 class225 = new Class225();
	public Class226 class226 = new Class226();
	public Class228 class228 = new Class228();
	public Class229 class229 = new Class229();
	public Class23 class23 = new Class23();
	public Class230 class230 = new Class230();
	public Class231 class231 = new Class231();
	public Class232 class232 = new Class232();
	public Class233 class233 = new Class233();
	public Class234 class234 = new Class234();
	public Class236 class236 = new Class236();
	public Class237 class237 = new Class237();
	public Class238 class238 = new Class238();
	public Class239 class239 = new Class239();
	public Class240 class240 = new Class240();
	public Class249 class249 = new Class249();
	public Class25 class25 = new Class25();
	public Class250 class250 = new Class250();
	public Class254 class254 = new Class254();
	public Class255 class255 = new Class255();
	public Class260 class260 = new Class260();
	public Class262 class262 = new Class262();
	public Class263 class263 = new Class263();
	public Class265 class265 = new Class265();
	public Class268 class268 = new Class268();
	public Class27 class27 = new Class27();
	public Class276 class276 = new Class276();
	public Class277 class277 = new Class277();
	public Class278 class278 = new Class278();
	public Class279 class279 = new Class279();
	public Class28 class28 = new Class28();
	public Class280 class280 = new Class280();
	public Class281 class281 = new Class281();
	public Class282 class282 = new Class282();
	public Class283 class283 = new Class283();
	public Class285 class285 = new Class285();
	public Class287 class287 = new Class287();
	public Class289 class289 = new Class289();
	public Class29 class29 = new Class29();
	public Class293 class293 = new Class293();
	public Class296 class296 = new Class296();
	public Class299 class299 = new Class299();
	public Class3 class3 = new Class3();
	public Class300 class300 = new Class300();
	public Class305 class305 = new Class305();
	public Class31 class31 = new Class31();
	public Class33 class33 = new Class33();
	public Class34 class34 = new Class34();
	public Class35 class35 = new Class35();
	public Class36 class36 = new Class36();
	public Class37 class37 = new Class37();
	public Class39 class39 = new Class39();
	public Class40 class40 = new Class40();
	public Class41 class41 = new Class41();
	public Class43 class43 = new Class43();
	public Class44 class44 = new Class44();
	public Class45 class45 = new Class45();
	public Class46 class46 = new Class46();
	public Class47 class47 = new Class47();
	public Class48 class48 = new Class48();
	public Class5 class5 = new Class5();
	public Class52 class52 = new Class52();
	public Class54 class54 = new Class54();
	public Class56 class56 = new Class56();
	public Class60 class60 = new Class60();
	public Class61 class61 = new Class61();
	public Class64 class64 = new Class64();
	public Class7 class7 = new Class7();
	public Class72 class72 = new Class72();
	public Class81 class81 = new Class81();
	public Class82 class82 = new Class82();
	public Class86 class86 = new Class86();
	public Class87 class87 = new Class87();
	public Class89 class89 = new Class89();
	public Class91 class91 = new Class91();
	public Class94 class94 = new Class94();
	public Class96 class96 = new Class96();
	public ClassInfo classInfo = new ClassInfo();
	public Client client = new Client(RSGame.rootReference);
	public ClientPacket clientPacket = new ClientPacket();
	public CodeBook codeBook = new CodeBook(null);
	public CollisionData collisionData = new CollisionData(null);
	public CombatInfo1 combatInfo1 = new CombatInfo1();
	public CombatInfo2 combatInfo2 = new CombatInfo2();
	public CombatInfoList combatInfoList = new CombatInfoList(null);
	public CombatInfoListHolder combatInfoListHolder = new CombatInfoListHolder(null);
	public ContextMenuRow contextMenuRow = new ContextMenuRow();
	public Coordinates coordinates = new Coordinates();
	public DecorativeObject decorativeObject = new DecorativeObject();
	public Deque deque = new Deque(null);
	public DirectByteBuffer directByteBuffer = new DirectByteBuffer();
	public DState dState = new DState(null);
	public DynamicObject dynamicObject = new DynamicObject();
	public Enum enum_ = new Enum();
	public Enumerated enumerated = new Enumerated();
	public FaceNormal faceNormal = new FaceNormal();
	public FileOnDisk fileOnDisk = new FileOnDisk(null);
	public FileRequest fileRequest = new FileRequest();
	public FileSystem fileSystem = new FileSystem();
	public Floor1 floor1 = new Floor1(null);
	public FloorUnderlayDefinition floorUnderlayDefinition = new FloorUnderlayDefinition();
	public FontName fontName = new FontName();
	public Fonts fonts = new Fonts();
	public FontTypeFace fontTypeFace = new FontTypeFace();
	public Frame frame = new Frame();
	public FrameMap frameMap = new FrameMap();
	public Frames frames = new Frames();
	public Friend friend = new Friend(null);
	public FriendLoginUpdate friendLoginUpdate = new FriendLoginUpdate();
	public GameEngine gameEngine = new GameEngine();
	public GameObject gameObject = new GameObject();
	public GrandExchangeEvent grandExchangeEvent = new GrandExchangeEvent();
	public GrandExchangeEvents grandExchangeEvents = new GrandExchangeEvents(null);
	public GrandExchangeOffer grandExchangeOffer = new GrandExchangeOffer(null);
	public Graphics3D graphics3D = new Graphics3D();
	public GraphicsObject graphicsObject = new GraphicsObject();
	public GroundObject groundObject = new GroundObject();
	public GZipDecompressor gzipDecompressor = new GZipDecompressor();
	public HashTable hashTable = new HashTable(null);
	public HashTableIterator hashTableIterator = new HashTableIterator();
	public Huffman huffman = new Huffman(null);
	public Identifiers identifiers = new Identifiers();
	public Ignore ignore = new Ignore(null);
	public IndexData indexData = new IndexData(null);
	public IndexDataBase indexDataBase = new IndexDataBase(null);
	public IndexedSprite indexedSprite = new IndexedSprite(null);
	public IndexFile indexFile = new IndexFile(null);
	public IndexStoreActionHandler indexStoreActionHandler = new IndexStoreActionHandler();
	public IntegerNode integerNode = new IntegerNode();
	public InvType invType = new InvType();
	public ISAACCipher isaacCipher = new ISAACCipher();
	public Item item = new Item();
	public ItemComposition itemComposition = new ItemComposition();
	public ItemContainer itemContainer = new ItemContainer();
	public ItemLayer itemLayer = new ItemLayer();
	public IterableDualNodeQueue iterableDualNodeQueue = new IterableDualNodeQueue(null);
	public IterableHashTable iterableHashTable = new IterableHashTable(null);
	public JagexGame jagexGame = new JagexGame();
	public JagexLoginType jagexLoginType = new JagexLoginType();
	public KeyFocusListener keyFocusListener = new KeyFocusListener();
	public KitDefinition kitDefinition = new KitDefinition();
	public LoginPacket loginPacket = new LoginPacket();
	public MachineInfo machineInfo = new MachineInfo(null);
	public MainBufferProvider mainBufferProvider = new MainBufferProvider();
	public Mapping mapping = new Mapping(null);
	public MessageNode messageNode = new MessageNode(null);
	public MilliTimer milliTimer = new MilliTimer();
	public Model model = new Model();
	public ModelData modelData = new ModelData();
	public MouseInput mouseInput = new MouseInput();
	public MouseRecorder mouseRecorder = new MouseRecorder(null);
	public MouseWheelHandler mouseWheelHandler = new MouseWheelHandler();
	public NanoTimer nanoTimer = new NanoTimer();
	public NetWriter netWriter = new NetWriter();
	public Node node = new Node();
	public Node2LinkedList node2LinkedList = new Node2LinkedList(null);
	public NodeCache nodeCache = new NodeCache(null);
	public NPC npc = new NPC(null);
	public NPCComposition npcComposition = new NPCComposition();
	public ObjectNode objectNode = new ObjectNode();
	public ObjectComposition objectComposition = new ObjectComposition();
	public Occluder occluder = new Occluder();
	public Overlay overlay = new Overlay();
	public PacketBuffer packetBuffer = new PacketBuffer();
	public PacketNode packetNode = new PacketNode();
	public Parameters parameters = new Parameters();
	public PendingSpawn pendingSpawn = new PendingSpawn();
	public Player player = new Player(null);
	public PlayerComposition playerComposition = new PlayerComposition();
	public Preferences preferences = new Preferences(null);
	public Projectile projectile = new Projectile();
	public Rasterizer2D rasterizer2D = new Rasterizer2D();
	public Region region = new Region(null);
	public Renderable renderable = new Renderable();
	public RenderOverview renderOverview = new RenderOverview(null);
	public Residue residue = new Residue(null);
	public RSCanvas rsCanvas = new RSCanvas();
	public RunException runException = new RunException();
	public ServerPacket serverPacket = new ServerPacket();
	public SceneTileModel sceneTileModel = new SceneTileModel();
	public SceneTilePaint sceneTilePaint = new SceneTilePaint();
	public Script script = new Script();
	public ScriptEvent scriptEvent = new ScriptEvent();
	public ScriptState scriptState = new ScriptState(null);
	public ScriptVarType scriptVarType = new ScriptVarType();
	public Sequence sequence = new Sequence();
	public Signlink signlink = new Signlink();
	public Size size = new Size();
	public SoundEffect soundEffect = new SoundEffect(null);
	public SoundEffect3 soundEffect3 = new SoundEffect3(null);
	public SoundTask soundTask = new SoundTask();
	public SourceDataSoundSystem sourceDataSoundSystem = new SourceDataSoundSystem();
	public Spotanim spotanim = new Spotanim();
	public SpritePixels spritePixels = new SpritePixels(null);
	public Task task = new Task(null);
	public Texture texture = new Texture();
	public TextureProvider textureProvider = new TextureProvider();
	public Tile tile = new Tile();
	public TotalQuantityComparator totalQuantityComparator = new TotalQuantityComparator();
	public UnitPriceComparator unitPriceComparator = new UnitPriceComparator();
	public UrlRequest urlRequest = new UrlRequest(null);
	public UrlRequester urlRequester = new UrlRequester();
	public Varbit varbit = new Varbit();
	public Varcs varcs = new Varcs();
	public VarPlayerType varPlayerType = new VarPlayerType();
	public VertexNormal vertexNormal = new VertexNormal();
	public WallObject wallObject = new WallObject();
	public Widget widget = new Widget();
	public WidgetNode widgetNode = new WidgetNode();
	public World world = new World();
	public WorldComparator worldComparator = new WorldComparator();
	public WorldMapData worldMapData = new WorldMapData();
	public WorldMapSectionBase worldMapSectionBase = new WorldMapSectionBase();
	public WorldMapType1 worldMapType1 = new WorldMapType1();
	public WorldMapType2 worldMapType2 = new WorldMapType2();
	public WorldMapType3 worldMapType3 = new WorldMapType3();

}
